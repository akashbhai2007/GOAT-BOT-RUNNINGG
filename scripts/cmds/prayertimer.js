const moment = require("moment-timezone");
const schedule = require("node-schedule");

module.exports.config = {
  name: "prayertimer",
  version: "2.0",
  role: 0,
  author: "Mohammad Akash",
  description: "ЁЯХМ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржирж╛ржорж╛ржЬрзЗрж░ рж╕ржорзЯ рж╕ржм ржЧрзНрж░рзБржкрзЗ ржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛ржмрзЗ",
  category: "AutoTime",
};

module.exports.onLoad = async function ({ api }) {
  const timezone = "Asia/Dhaka";

  // ЁЯХЛ ржирж╛ржорж╛ржЬрзЗрж░ рж╕ржорзЯрж╕рзВржЪрж┐ (Bangladesh Standard)
  const prayerTimes = [
    { name: "ржлржЬрж░ ЁЯМЕ", time: "4:30 AM", message: "ржирж╛ржорж╛ржЬрзЗрж░ ржорж╛ржзрзНржпржорзЗ ржжрж┐ржирзЗрж░ рж╢рзБрж░рзБ рж╣рзЛржХ ржЖрж▓рзНрж▓рж╛рж╣рж░ рж░рж╣ржорждрзЗ ЁЯд▓" },
    { name: "ржпрзЛрж╣рж░ тШАя╕П", time: "1:00 PM", message: "ржжрж┐ржирзЗрж░ ржмрзНржпрж╕рзНрждрждрж╛рж░ ржорж╛ржЭрзЗ ржПржХржЯрзБ ржмрж┐рж░рждрж┐ ржирж┐ржи, ржирж╛ржорж╛ржЬ ржкрзЬрзБржи ЁЯХЛ" },
    { name: "ржЖрж╕рж░ ЁЯМЗ", time: "4:45 PM", message: "ржмрж┐ржХрзЗрж▓рзЗрж░ ржПржЗ рж╕ржорзЯржЯрж╛рждрзЗ ржирж╛ржорж╛ржЬрзЗрж░ ржорж╛ржзрзНржпржорзЗ рж╢рж╛ржирзНрждрж┐ ржкрж╛ржи ЁЯМ┐" },
    { name: "ржорж╛ржЧрж░рж┐ржм ЁЯМЖ", time: "6:15 PM", message: "рж╕рзВрж░рзНржп ржЕрж╕рзНрждрзЗрж░ рж╕рж╛ржерзЗ ржирж╛ржорж╛ржЬрзЗ ржоржи ржжрж┐ржи ЁЯМЕ" },
    { name: "ржПрж╢рж╛ ЁЯМЩ", time: "8:00 PM", message: "ржШрзБржорж╛ржирзЛрж░ ржЖржЧрзЗ ржирж╛ржорж╛ржЬ ржкрзЬрзБржи, ржЖрж▓рзНрж▓рж╛рж╣рж░ ржХрж╛ржЫрзЗ рж╢рж╛ржирзНрждрж┐ ржЪрж╛ржЗрзБржи ЁЯд▓" },
  ];

  // ЁЯФБ ржкрзНрж░рждрж┐ржЯрж┐ ржирж╛ржорж╛ржЬрзЗрж░ ржЬржирзНржп ржЬржм рж╕рзЗржЯ ржХрж░рж╛
  for (const prayer of prayerTimes) {
    const hour24 = moment(prayer.time, ["h:mm A"]).format("H");
    const minute = parseInt(prayer.time.split(":")[1]);

    schedule.scheduleJob({ hour: hour24, minute, tz: timezone }, async () => {
      try {
        const allThreads = await api.getThreadList(100, null, ["INBOX"]);
        const groupThreads = allThreads.filter(t => t.isGroup);
        const date = moment().tz(timezone).format("DD-MM-YYYY");

        const message = `
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
ЁЯХМ ржирж╛ржорж╛ржЬрзЗрж░ рж╕ржорзЯ: ${prayer.name}
ЁЯХТ рж╕ржорзЯ: ${prayer.time}
ЁЯУЦ ${prayer.message}
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
ЁЯУЕ DATE : ${date}
ЁЯдЦ ЁЭЩ▒ЁЭЪШЁЭЪЭ ЁЭЩ╛ЁЭЪаЁЭЪЧЁЭЪОЁЭЪЫ : ЁЭЩ╝ЁЭЪШЁЭЪСЁЭЪКЁЭЪЦЁЭЪЦЁЭЪКЁЭЪН ЁЭЩ░ЁЭЪФЁЭЪКЁЭЪЬЁЭЪС
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ`;

        console.log(`ЁЯХЛ ${prayer.name} (${prayer.time}) тЖТ ${groupThreads.length} ржЧрзНрж░рзБржкрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ...`);

        for (const thread of groupThreads) {
          await api.sendMessage(message, thread.threadID);
        }

        console.log(`тЬЕ рж╕ржлрж▓ржнрж╛ржмрзЗ "${prayer.name}" ржмрж╛рж░рзНрждрж╛ рж╕ржм ржЧрзНрж░рзБржкрзЗ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗ!`);
      } catch (err) {
        console.error("тЭМ PrayerTimer Error:", err);
      }
    });
  }

  console.log("тЬЕ PrayerTimer System Loaded тАФ ржирж╛ржорж╛ржЬрзЗрж░ рж╕ржорзЯ ржЕржЯрзЛ ржмрж╛рж░рзНрждрж╛ рж╢рзБрж░рзБ рж╣рзЯрзЗржЫрзЗ...");
};
